import discord
import asyncio
from discord.ext import commands

from tortoise.transactions import in_transaction
from .views import JumpView
from .exceptions import NotInHelpForum, ThreadAlreadyAnswered, NotAThreadOwner
from .settings import (HELP_FORUM_ID,
                       INITIAL_MESSAGE_EMBED_IMAGE_URL,
                       HELPER_ROLE_ID, BOT_MESSAGE_CHANNEL_ID) 
from .checkers import (no_thread_solution_yet,
                       thread_owner_only)
from database import Ticket, User, UserLevelChange


class ReputationCog(discord.Cog):
    @discord.user_command(name="–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É —É—á–∞—Å—Ç–Ω–∏–∫–∞ üåü")
    async def reputation_check(self, ctx: discord.ApplicationContext, member: discord.Member):
        if member.bot:
            return await ctx.respond("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ —É –±–æ—Ç–∞", ephemeral=True)

        user = await (User
                      .get_or_none(id=member.id)
                      .only(
                          "helper_reputation", "helper_level",
                          "asked_questions", "resolved_questions"))
        
        if not user:
            return await ctx.respond("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ–ª—å—à–µ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ", ephemeral=True)

        embed = discord.Embed(
            title=f"–ö–∞—Ä—Ç–æ—á–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞",
            description=f"{member.mention}",
            fields=(
                discord.EmbedField(
                    name="üèÜ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                    value=(
                        f"–ó–∞–¥–∞–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: **{user.asked_questions}**\n"
                        f"–û—Ç–≤–µ—á–µ–Ω–æ –Ω–∞ –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã: **{user.resolved_questions}**"
                    ),
                ),
                discord.EmbedField(
                    name="üåü –†–µ–ø—É—Ç–∞—Ü–∏—è –ø–æ–º–æ—â–Ω–∏–∫–∞",
                    value=(
                        f"–£—Ä–æ–≤–µ–Ω—å: **{user.helper_level}**\n"
                        f"–†–µ–ø—É—Ç–∞—Ü–∏—è: **{user.helper_reputation}**\n"
                        f"–°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å —á–µ—Ä–µ–∑ **{user.rep_until_next_level()}** –æ—á–∫–æ–≤"
                    ),
                ),
            ),
            color=member.color,
            thumbnail=member.display_avatar.url,
            footer=discord.EmbedFooter("*–ü—Ä–∏ –≤—ã—Ö–æ–¥–µ —Å —Å–µ—Ä–≤–µ—Ä–∞ –¥–∞–Ω–Ω—ã–µ —Å–±—Ä–∞—Å—ã–≤–∞—é—Ç—Å—è")
        )

        await ctx.respond(embed=embed, ephemeral=True)
    

class HelpCog(discord.Cog):
    def __init__(self, bot: discord.Bot):
        super().__init__()
        self.bot = bot

    ticket_command = discord.SlashCommandGroup(
        name="ticket",
        checks=[commands.check_any(
            commands.has_role(HELPER_ROLE_ID),
            commands.is_owner()
        )]
    )

    @discord.Cog.listener()
    async def on_thread_create(self, thread: discord.Thread):
        if not thread.parent_id == HELP_FORUM_ID:
            return

        async with in_transaction():
            await Ticket.create(owner_id=thread.owner_id, thread_id=thread.id)
            user = await User.get(id=thread.owner_id).only("id", "asked_questions")
            user.asked_questions += 1
            await user.save(update_fields=["asked_questions"])

        embed = discord.Embed(
            title=f"–í–æ–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω!",
            description=(
                "–í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –Ω–µ–≥–æ –¥–∞–¥—É—Ç –æ—Ç–≤–µ—Ç, –ø—Ä–æ—Å–∏–º –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å.\n"
                "üìù –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–º–µ—Ç–∏—Ç—å –æ—Ç–≤–µ—Ç –∫–∞–∫ —Ä–µ—à–µ–Ω–∏–µ –Ω–∞–∂–∞–≤ **–ü–ö–ú** –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ -> "
                f"\"–ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è\" -> \"{HelpCog.mark_as_answer.name}\""
            ),
            image=INITIAL_MESSAGE_EMBED_IMAGE_URL,
            color=0x4334eb,
        )

        await thread.send(embed=embed)

    @discord.Cog.listener()
    async def on_member_join(self, member: discord.Member):
        await User.get_or_create(id=member.id)
    
    @discord.Cog.listener()
    async def on_raw_member_remove(payload: discord.RawMemberRemoveEvent):
        user = await User.get_or_none(id=payload.user.id)
        if user:
            await user.delete()

    @discord.Cog.listener()
    async def on_user_help_level_up(self, member: discord.Member, new_level: int):
        embed = discord.Embed(
            title="<:upvote:1154341416286298172> –£—Ä–æ–≤–µ–Ω—å –ø–æ–º–æ—â–∏ –≤—ã—Ä–æ—Å!",
            description=(
                f"{member.display_name}, –ø–æ–∑–¥—Ä–∞–≤–ª—è—é!\n"
                f"–¢–µ–ø–µ—Ä—å —Ç–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–¥–µ—Ä–∂–∫–∏: **{new_level}**!\n\n"
                "–Ø –æ—á–µ–Ω—å –±–ª–∞–≥–æ–¥–∞—Ä–µ–Ω –∑–∞ —Ç–≤–æ–π —Ç—Ä—É–¥.\n–ë–ª–∞–≥–æ–¥–∞—Ä—è —Ç–µ–±–µ –≤—Å—ë –±–æ–ª—å—à–µ "
                "–∏ –±–æ–ª—å—à–µ –ª—é–¥–µ–π –ø—Ä–µ–æ–¥–æ–ª–µ–≤–∞—é—Ç —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ –æ–±—É—á–µ–Ω–∏—è –∏ –ø–æ–∑–Ω–∞—é—Ç "
                "–Ω–æ–≤—ã–µ –¥–ª—è —Å–µ–±—è —Ç–µ–º—ã.\n–°–ø–∞—Å–∏–±–æ üíô"
            ),
            thumbnail=member.display_avatar.url,
            color=0xFFD700
        )

        await self.bot.get_channel(BOT_MESSAGE_CHANNEL_ID).send(member.mention, embed=embed)
        

    @discord.message_command(name="–ü–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ —Ä–µ—à–µ–Ω–∏–µ ‚úÖ")
    @no_thread_solution_yet()
    @thread_owner_only()
    async def mark_as_answer(self, ctx: discord.ApplicationContext, message: discord.Message):
        await ctx.defer()
        if message.author.bot:
            error_embed = discord.Embed(
                title="‚ùå –û—à–∏–±–∫–∞",
                description="–ù–µ–ª—å–∑—è –ø–æ–º–µ—á–∞—Ç—å –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –∫–∞–∫ —Ä–µ—à–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞",
            )
            return await ctx.respond(embed=error_embed, ephemeral=True)

        success_embed = discord.Embed(
            title="‚úÖ –£—Å–ø–µ—à–Ω–æ",
            fields=[
                discord.EmbedField(
                    name="–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ",
                    value=f"[–ù–∞–∂–∞—Ç—å —Å—é–¥–∞]({message.jump_url})"
                )
            ]
        )

        ticket = await Ticket.resolve(thread_id=ctx.channel_id, helper_id=message.author.id)
        if message.author.id == ctx.author.id: # –û—Ç–≤–µ—Ç–∏–ª –Ω–∞ —Å–≤–æ–π –∂–µ –≤–æ–ø—Ä–æ—Å
            success_embed.description = "–í—ã –ø–æ–º–µ—Ç–∏–ª–∏ —Å–≤–æ–π –æ—Ç–≤–µ—Ç –∫–∞–∫ —Ä–µ—à–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞"
        else:
            success_embed.description = f"–í–æ–ø—Ä–æ—Å —Ä–µ—à—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.author.mention}"

            async with in_transaction():
                user = await User.get(id=message.author.id)
                user.resolved_questions += 1
                level_change, level = await user.change_rep(ticket.bounty)
                await user.save()
                if level_change == UserLevelChange.level_up:
                    ctx.bot.dispatch("user_help_level_up", message.author, level)

        data = await asyncio.gather(
            message.add_reaction("‚úÖ"),
            ctx.respond(embed=success_embed),
            anext(ctx.channel.history(
                after=ctx.channel.created_at,
                limit=1,
                oldest_first=True
            ))
        )

        starting_message = data[2]
        await starting_message.edit(view=JumpView(message.jump_url))

    @ticket_command.command(description="–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å")
    async def rename(self, ctx: discord.ApplicationContext, new_name: str):
        await ctx.channel.edit(name=new_name)
        await ctx.respond(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {ctx.author.mention} –∏–∑–º–µ–Ω–∏–ª –Ω–∞–∑–≤–∞–Ω–∏–µ")

    @ticket_command.command(description="–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å")
    async def archive(self, ctx: discord.ApplicationContext):
        await ctx.respond(f"–í–æ–ø—Ä–æ—Å –∑–∞–∫—Ä—ã—Ç")
        await ctx.channel.archive(locked=True)
    
    @ticket_command.command(description="–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –∑–∞–Ω–æ–≥–æ —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å")
    async def unarchive(self, ctx: discord.ApplicationContext):
        await ctx.channel.unarchive()
        await ctx.respond(f"–í–æ–ø—Ä–æ—Å –æ—Ç–∫—Ä—ã—Ç")

    def cog_check(self, ctx: discord.ApplicationContext):
        if (
            ctx.channel.type != discord.ChannelType.public_thread or
            ctx.channel.parent_id != HELP_FORUM_ID
        ):
            raise NotInHelpForum
        return True
    
    async def cog_command_error(self, ctx: discord.ApplicationContext, error: Exception):
        if isinstance(error, NotInHelpForum):
            await ctx.respond(
                f"–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ <#{HELP_FORUM_ID}>",
                ephemeral=True
            )
        elif isinstance(error, commands.MissingRole):
            await ctx.respond(
                "–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä "
                f"–∏ –ª—é–¥–∏ —Å —Ä–æ–ª—å—é <@&{error.missing_role}>",
                ephemeral=True
            )
        elif isinstance(error, commands.CheckAnyFailure):
            await ctx.respond(
                "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã",
                ephemeral=True
            )
        elif isinstance(error, ThreadAlreadyAnswered):
            await ctx.respond(
                "–≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å —É–∂–µ –±—ã–ª —Ä–µ—à—ë–Ω –∏ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ –Ω–µ–ª—å–∑—è –∏–ª–∏ –æ–Ω –±—ã–ª –∑–∞–¥–∞–Ω –¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞",
                ephemeral=True
            )
        elif isinstance(error, NotAThreadOwner):
            await ctx.respond(
                "–≠—Ç–æ –Ω–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å",
                ephemeral=True
            )